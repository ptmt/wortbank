/**
 * Taken from https://raw.githubusercontent.com/gradle/gradle-build-scan-snippets/master/guided-trials-default-custom-user-data/default-custom-user-data.gradle.
 * This Gradle script captures data about the OS, IDE, CI, and Git and stores it in build scans via custom tags, custom links, and custom values.
 */

tagOs()
tagIde()
tagCiOrLocal()
addCiMetadata()
addGitMetadata()
addTestParallelization()

// Add here other scripts, if needed
//apply from:"${rootProject.projectDir}/<<other-script.gradle>>"

void tagOs() {
    buildScan.tag System.getProperty('os.name')
}

void tagIde() {
    if (project.hasProperty('android.injected.invoked.from.ide')) {
        buildScan.tag 'Android Studio'
    } else if (System.getProperty('idea.version')) {
        buildScan.tag 'IntelliJ IDEA'
    } else if (System.getProperty('eclipse.buildId')) {
        buildScan.tag 'Eclipse'
    } else if (!isCi()) {
        buildScan.tag 'Cmd Line'
    }
}

void tagCiOrLocal() {
    buildScan.tag(isCi() ? 'CI' : 'LOCAL')
}

void addCiMetadata() {
    if (isTeamCity()) {
        def teamCityConfigurationFileProp = 'teamcity.configuration.properties.file'
        if (project.hasProperty(teamCityConfigurationFileProp)) {
            def properties = new Properties()
            properties.load(new FileInputStream("${project.property(teamCityConfigurationFileProp)}"))
            def teamCityServerUrl = properties.getProperty("teamcity.serverUrl")
            if (teamCityServerUrl && project.hasProperty('build.number') && project.hasProperty('teamcity.buildType.id')) {
                def teamCityBuildNumber = project.property('build.number')
                def teamCityBuildTypeId = project.property('teamcity.buildType.id')
                buildScan.link 'TeamCity build', "${appendIfMissing(teamCityServerUrl, '/')}viewLog.html?buildNumber=${teamCityBuildNumber}&buildTypeId=${teamCityBuildTypeId}"
            }
        }
        if (project.hasProperty('build.number')) {
            buildScan.value 'CI build number', project.property('build.number')
        }
        if (project.hasProperty('agent.name')) {
            def agentName = project.property('agent.name')
            buildScan.tag agentName
            buildScan.value 'CI agent name', agentName
        }
    }
}

void addGitMetadata() {
    buildScan.background {
        if (!isGitInstalled()) {
            return
        }

        apply from: 'gradle/git-utils.gradle'

        def gitCommitId = gitCommitId()
        def gitBranchName = ext.execAndGetStdout('git', 'rev-parse', '--abbrev-ref', 'HEAD')
        def gitStatus = execAndGetStdout('git', 'status', '--porcelain')

        if (gitCommitId) {
            def commitIdLabel = 'Git commit id'
            value commitIdLabel, gitCommitId
            addCustomValueSearchLink 'Git commit id build scans', [(commitIdLabel): gitCommitId]
            def originUrl = execAndGetStdout('git', 'config', '--get', 'remote.origin.url')
            if (originUrl.contains('github.com')) { // only for GitHub
                def repoPath = (originUrl =~ /(.*)github\.com[\/|:](.*)/)[0][2]
                if (repoPath.endsWith('.git')) {
                    repoPath = repoPath.substring(0, repoPath.length() - 4)
                }
                link 'Github Source', "https://github.com/$repoPath/tree/" + gitCommitId
            }
        }
        if (gitBranchName) {
            tag gitBranchName
            value 'Git branch', gitBranchName
        }
        if (gitStatus) {
            tag 'Dirty'
            value 'Git status', gitStatus
        }
    }
}

void addTestParallelization() {
    allprojects { p ->
        p.tasks.withType(Test).configureEach { t -> doFirst { buildScan.value "${t.identityPath}#maxParallelForks", t.maxParallelForks.toString() } }
    }
}

static boolean isCi() {
    isJenkins() || isTeamCity() || isCircleCI() || isBamboo()
}

static boolean isJenkins() {
    System.getenv('JENKINS_URL')
}

static boolean isTeamCity() {
    System.getenv('TEAMCITY_VERSION')
}

static boolean isCircleCI() {
    System.getenv('CIRCLECI')
}

static boolean isBamboo() {
    System.getenv('bamboo_resultsUrl')
}

void addCustomValueSearchLink(String title, Map<String, String> search) {
    if (buildScan.server) {
        buildScan.link title, customValueSearchUrl(search)
    }
}

String customValueSearchUrl(Map<String, String> search) {
    def query = search.collect { name, value ->
        "search.names=${encodeURL(name)}&search.values=${encodeURL(value)}"
    }.join('&')
    "${appendIfMissing(buildScan.server, '/')}scans?$query"
}

static String encodeURL(String url) {
    URLEncoder.encode(url, 'UTF-8')
}

static boolean isGitInstalled() {
    try {
        "git --version".execute().waitFor() == 0
    } catch (IOException ignored) {
        false
    }
}

static String appendIfMissing(String str, String suffix) {
    str.endsWith(suffix) ? str : str + suffix
}
